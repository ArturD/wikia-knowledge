// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.wikia.knowledge.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.wikia.knowledge.domain.EntityCollection;
import net.wikia.knowledge.domain.EntityCollectionDataOnDemand;
import net.wikia.knowledge.repository.EntityCollectionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EntityCollectionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EntityCollectionDataOnDemand: @Component;
    
    private Random EntityCollectionDataOnDemand.rnd = new SecureRandom();
    
    private List<EntityCollection> EntityCollectionDataOnDemand.data;
    
    @Autowired
    EntityCollectionRepository EntityCollectionDataOnDemand.entityCollectionRepository;
    
    public EntityCollection EntityCollectionDataOnDemand.getNewTransientEntityCollection(int index) {
        EntityCollection obj = new EntityCollection();
        setClassifierName(obj, index);
        setDateCreated(obj, index);
        setEditorId(obj, index);
        setHumanVerified(obj, index);
        setPageId(obj, index);
        setPageTitle(obj, index);
        setQuality(obj, index);
        setWikiId(obj, index);
        return obj;
    }
    
    public void EntityCollectionDataOnDemand.setClassifierName(EntityCollection obj, int index) {
        String classifierName = "classifierName_" + index;
        if (classifierName.length() > 60) {
            classifierName = classifierName.substring(0, 60);
        }
        obj.setClassifierName(classifierName);
    }
    
    public void EntityCollectionDataOnDemand.setDateCreated(EntityCollection obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void EntityCollectionDataOnDemand.setEditorId(EntityCollection obj, int index) {
        Integer editorId = new Integer(index);
        if (editorId < 0) {
            editorId = 0;
        }
        obj.setEditorId(editorId);
    }
    
    public void EntityCollectionDataOnDemand.setHumanVerified(EntityCollection obj, int index) {
        Boolean humanVerified = true;
        obj.setHumanVerified(humanVerified);
    }
    
    public void EntityCollectionDataOnDemand.setPageId(EntityCollection obj, int index) {
        int pageId = index;
        if (pageId < 0) {
            pageId = 0;
        }
        obj.setPageId(pageId);
    }
    
    public void EntityCollectionDataOnDemand.setPageTitle(EntityCollection obj, int index) {
        String pageTitle = "pageTitle_" + index;
        if (pageTitle.length() > 255) {
            pageTitle = pageTitle.substring(0, 255);
        }
        obj.setPageTitle(pageTitle);
    }
    
    public void EntityCollectionDataOnDemand.setQuality(EntityCollection obj, int index) {
        float quality = new Integer(index).floatValue();
        obj.setQuality(quality);
    }
    
    public void EntityCollectionDataOnDemand.setWikiId(EntityCollection obj, int index) {
        int wikiId = index;
        if (wikiId < 0) {
            wikiId = 0;
        }
        obj.setWikiId(wikiId);
    }
    
    public EntityCollection EntityCollectionDataOnDemand.getSpecificEntityCollection(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EntityCollection obj = data.get(index);
        Long id = obj.getId();
        return entityCollectionRepository.findOne(id);
    }
    
    public EntityCollection EntityCollectionDataOnDemand.getRandomEntityCollection() {
        init();
        EntityCollection obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return entityCollectionRepository.findOne(id);
    }
    
    public boolean EntityCollectionDataOnDemand.modifyEntityCollection(EntityCollection obj) {
        return false;
    }
    
    public void EntityCollectionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = entityCollectionRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EntityCollection' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EntityCollection>();
        for (int i = 0; i < 10; i++) {
            EntityCollection obj = getNewTransientEntityCollection(i);
            try {
                entityCollectionRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            entityCollectionRepository.flush();
            data.add(obj);
        }
    }
    
}
